package com.company;
import com.intellij.ide.ui.AppearanceOptionsTopHitProvider;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.*;
import java.awt.*;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Calendar;


public class Application { // JTextArea and stuff needs to be arranged, IO system needs to be made operational

    private static JFrame applicationFrame = new JFrame(); // Creates a window, essentially
    private static String time;
    private static String user;
    private static JTextArea reportArea;
    public static void Launch() { // Launch() method's applicationFrame and applicationPanel created by Luke on 10/4/16
        applicationFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        applicationFrame.setLocationRelativeTo(null); // Start position will exist on most screens because it isn't specific
        applicationFrame.setResizable(true);
        applicationFrame.setSize(1000, 800);
        applicationFrame.setTitle("Welcome, " + LoginPage.username + "!");
        applicationFrame.setVisible(true);
        applicationFrame.setBackground(Color.white);
        JPanel applicationPanel = new JPanel(new GridBagLayout()); // Creates new panel in window.
        applicationFrame.getContentPane().add(applicationPanel);
        JTextArea reportArea = new JTextArea(15, 30);
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = 0;
        applicationPanel.add(reportArea, c);
        // Create quit button
        JButton quit = new JButton("Save");
        quit.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        LoginPage.quit(); // C ASAP
                    }
                }
        );
        c.gridx = -2;
        c.gridy = 2;
        applicationPanel.add(quit, c);

        /*  You guys will probably stay within this class for the application,
         * so this is likely all you'll need. Just do whatever makes the program fits the algorithm
         * and then we'll worry about making it fancier. Below are a few methods that might make it
         * easier for you guys to read/write to files (since the file i/o system was my responsibility
         * anyway). Feel free to create a few more methods to make you guys' process easier.
         */
    }
private static void reportComposition () {// Report composition for project created by Jonathan Jang//
        File outputDirectory = new File(String.format("/Users/" + System.getProperty("user.name") + "/Documents/TT"), "read,write");
        if(checkPermissions() == false)
            JPanel applicationPanel = new JPanel(new GridBagLayout()); // Creates new panel in window.
        applicationFrame.getContentPane().add(applicationPanel);
        JTextArea reportArea = new JTextArea(15, 30); // the coordinates are determined by Mira's design choices
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = 0;
        applicationPanel.add(reportArea, c);
        // Create quit button
        JButton quit = new JButton("Save");
        quit.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        LoginPage.quit(); // C ASAP
                    }

    }
